name: Build C++ Docker Image, Run Test, Push to ACR  and Deploy to Azure Web App

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!README.md'
      - '!docs/**'
  pull_request:
    branches:
      - main
    paths:
      - '**'
      - '!README.md'
      - '!docs/**'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683     #v4.2.2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ libgtest-dev cmake

      - name: Create Build Directory
        run: mkdir build

      - name: Configure CMake
        run: cd build && cmake ..

      - name: Build
        run: cd build && make # This is the crucial step!

      - name: Run tests
        run: ./build/test_project # Use the correct executable name (test_project)

  build:
    runs-on: ubuntu-latest
    needs: [test]
    env:
      ACR_NAME: cplusplus
      IMAGE_NAME: cplusplus
      RESOURCE_GROUP: c-plus-plus-project
      WEBAPP_NAME: cplusplus
      LOCATION: eastus

    permissions:
      id-token: write
      contents: read
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683     #v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2   #v3.10.0

      - name: Azure Login using OIDC
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef51           #v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Extract metadata for Docker
        id: meta
        run: |
          echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "tag=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build C++ Docker image
        run: |
          docker build -t ${{ steps.meta.outputs.tag }} .

      - name: Push image to ACR
        run: docker push ${{ steps.meta.outputs.tag }}

      - name: Show pushed image
        run: |
          echo "Image pushed:"
          az acr repository show-tags --name ${{ env.ACR_NAME }} --repository ${{ env.IMAGE_NAME }} --output table


      - name: Create App Service Plan (if it doesn't exist)
        run: |
          if ! az appservice plan show --name cplusplus-plan --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating App Service Plan..."
            az appservice plan create \
              --name cplusplus-plan \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --is-linux \
              --sku F1
              --location eastus2
          else
            echo "App Service Plan already exists"
          fi

      - name: Create App Service with ACR image (if it doesn't exist)
        run: |
          if ! az webapp show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} &> /dev/null; then
            echo "Creating App Service with ACR image..."
            
            # Get ACR credentials
            ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --query username --output tsv)
            ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value --output tsv)
            
            # Create Web App with actual image and credentials
            az webapp create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --plan cplusplus-plan \
              --name ${{ env.WEBAPP_NAME }} \
              --location eastus2 \
              --deployment-container-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }} \
              --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io \
              --docker-registry-server-user $ACR_USERNAME \
              --docker-registry-server-password $ACR_PASSWORD
              
            echo "Waiting for App Service to be ready..."
            sleep 30
          else
            echo "App Service already exists"
          fi

        #### Update App Service with new image ####
      - name: Update App Service container image
        run: |
          echo "Updating App Service with new container image..."
          
          # Get ACR credentials
          ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --query username --output tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value --output tsv)
          
          # Update container settings with new image
          az webapp config container set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.WEBAPP_NAME }} \
            --location eastus2 \
            --container-image-name ${{ steps.meta.outputs.full_image }} \
            --container-registry-url https://${{ env.ACR_NAME }}.azurecr.io \
            --container-registry-user $ACR_USERNAME \
            --container-registry-password $ACR_PASSWORD

      - name: Restart App Service
        run: |
          echo "Restarting App Service to apply new container..."
          az webapp restart --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }}

      - name: Show deployment info
        run: |
          echo "Deployment completed!"
          echo "App Service URL: https://${{ env.WEBAPP_NAME }}.azurewebsites.net"
          az webapp show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --query defaultHostName --output tsv

      - name: Azure logout
        run: az logout
        if: always()